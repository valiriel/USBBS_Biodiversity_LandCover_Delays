model{

for(n in 1:N){
    
    q0.t2[n] ~ dpois(lambda[n])

################ Main model

    log(lambda[n]) <- a + 
# linear & quadratic terms t2
                            (aUrban.t2*urban.t2[n] + aUrbanSquared.t2*pow(urban.t2[n], 2) +
                              aForest.t2*forest.t2[n] + aForestSquared.t2*pow(forest.t2[n], 2) +
                              aGrassland.t2*grassland.t2[n] + aGrasslandSquared.t2*pow(grassland.t2[n], 2) +  
                              aCropland.t2*cropland.t2[n] + aCroplandSquared.t2*pow(cropland.t2[n], 2) +
                              aWetland.t2*wetland.t2[n] + aWetlandSquared.t2*pow(wetland.t2[n], 2) +
                              aTemperature.t2*tmean.t2[n] + aTemperatureSquared.t2*pow(tmean.t2[n], 2) +
# linear*linear interactions t2
                            aUrbanForest.t2*urban.t2[n]*forest.t2[n] +               
                              aUrbanGrassland.t2*urban.t2[n]*grassland.t2[n] +        
                              aUrbanCropland.t2*urban.t2[n]*cropland.t2[n] +          
                              aForestGrassland.t2*forest.t2[n]*grassland.t2[n] +      
                              aForestCropland.t2*forest.t2[n]*cropland.t2[n] +        
                              aGrasslandCropland.t2*grassland.t2[n]*cropland.t2[n] +  
                              aWetlandUrban.t2*wetland.t2[n]*urban.t2[n] +
                              aWetlandForest.t2*wetland.t2[n]*forest.t2[n] +
                              aWetlandGrassland.t2*wetland.t2[n]*grassland.t2[n] +
                              aWetlandCropland.t2*wetland.t2[n]*cropland.t2[n] +
# quadratic*linear interactions t2
                            aUrbanSquaredForest.t2*pow(urban.t2[n], 2)*forest.t2[n] +               
                              aUrbanSquaredGrassland.t2*pow(urban.t2[n], 2)*grassland.t2[n] +        
                              aUrbanSquaredCropland.t2*pow(urban.t2[n], 2)*cropland.t2[n] + 
                              aUrbanSquaredWetland.t2*pow(urban.t2[n], 2)*wetland.t2[n] +
                            aForestSquaredUrban.t2*pow(forest.t2[n], 2)*urban.t2[n] + 
                              aForestSquaredCropland.t2*pow(forest.t2[n], 2)*cropland.t2[n] +
                              aForestSquaredGrassland.t2*pow(forest.t2[n], 2)*grassland.t2[n] + 
                              aForestSquaredWetland.t2*pow(forest.t2[n], 2)*wetland.t2[n] +
                            aGrasslandSquaredUrban.t2*pow(grassland.t2[n], 2)*urban.t2[n] + 
                              aGrasslandSquaredForest.t2*pow(grassland.t2[n], 2)*forest.t2[n] +
                              aGrasslandSquaredCropland.t2*pow(grassland.t2[n], 2)*cropland.t2[n] + 
                              aGrasslandSquaredWetland.t2*pow(grassland.t2[n], 2)*wetland.t2[n] +
                            aCroplandSquaredUrban.t2*pow(cropland.t2[n], 2)*urban.t2[n] + 
                              aCroplandSquaredForest.t2*pow(cropland.t2[n], 2)*forest.t2[n] +
                              aCroplandSquaredGrassland.t2*pow(cropland.t2[n], 2)*grassland.t2[n] + 
                              aCroplandSquaredWetland.t2*pow(cropland.t2[n], 2)*wetland.t2[n] +
                            aWetlandSquaredUrban.t2*pow(wetland.t2[n], 2)*urban.t2[n] + 
                              aWetlandSquaredForest.t2*pow(wetland.t2[n], 2)*forest.t2[n] +
                              aWetlandSquaredGrassland.t2*pow(wetland.t2[n], 2)*grassland.t2[n] + 
                              aWetlandSquaredCropland.t2*pow(wetland.t2[n], 2)*cropland.t2[n]) *
# temporal lag function t2
                            (exp((-c.pos.forest*delta.pos.forest[n]) + (-c.neg.forest*delta.neg.forest[n]) +
                                   (-c.pos.urban*delta.pos.urban[n]) +
                                   (-c.pos.grassland*delta.pos.grassland[n]) + (-c.neg.grassland*delta.neg.grassland[n]) +
                                   (-c.pos.cropland*delta.pos.cropland[n]) + (-c.neg.cropland*delta.neg.cropland[n]) +
                                   (-c.pos.wetland*delta.pos.wetland[n]) + (-c.neg.wetland*delta.neg.wetland[n]) +
                                   (-c.pos.temp*delta.pos.temp[n]) + (-c.neg.temp*delta.neg.temp[n]))) + 
# linear and quadratic terms t1
                            (aUrban.t1*urban.t1[n] + aUrbanSquared.t1 * pow(urban.t1[n], 2) +
                              aForest.t1*forest.t1[n] + aForestSquared.t1 * pow(forest.t1[n], 2) +
                              aGrassland.t1*grassland.t1[n] + aGrasslandSquared.t1 * pow(grassland.t1[n], 2) +  
                              aCropland.t1*cropland.t1[n] + aCroplandSquared.t1 * pow(cropland.t1[n], 2) +
                              aWetland.t1*wetland.t1[n] + aWetlandSquared.t1 * pow(wetland.t1[n], 2) +
                              aTemperature.t1*tmean.t1[n] + aTemperatureSquared.t1*pow(tmean.t1[n],2) +
# linear*linear interactions t1
                            aUrbanForest.t1*urban.t1[n]*forest.t1[n] +               
                              aUrbanGrassland.t1*urban.t1[n]*grassland.t1[n] +        
                              aUrbanCropland.t1*urban.t1[n]*cropland.t1[n] +          
                              aForestGrassland.t1*forest.t1[n]*grassland.t1[n] +     
                              aForestCropland.t1*forest.t1[n]*cropland.t1[n] +        
                              aGrasslandCropland.t1*grassland.t1[n]*cropland.t1[n]+   
                              aWetlandUrban.t1 * wetland.t1[n]*urban.t1[n] +
                              aWetlandForest.t1 * wetland.t1[n]*forest.t1[n] +
                              aWetlandGrassland.t1 * wetland.t1[n]*grassland.t1[n] +
                              aWetlandCropland.t1 * wetland.t1[n]*cropland.t1[n] +
# quadratic*linear interactions t1
                            aUrbanSquaredForest.t1*pow(urban.t1[n], 2)*forest.t1[n] +               
                              aUrbanSquaredGrassland.t1*pow(urban.t1[n], 2)*grassland.t1[n] +        
                              aUrbanSquaredCropland.t1*pow(urban.t1[n], 2)*cropland.t1[n] + 
                              aUrbanSquaredWetland.t1*pow(urban.t1[n], 2)*wetland.t1[n] +
                            aForestSquaredUrban.t1*pow(forest.t1[n], 2)*urban.t1[n] + 
                              aForestSquaredCropland.t1*pow(forest.t1[n], 2)*cropland.t1[n] +
                              aForestSquaredGrassland.t1*pow(forest.t1[n], 2)*grassland.t1[n] + 
                              aForestSquaredWetland.t1*pow(forest.t1[n], 2)*wetland.t1[n] +
                            aGrasslandSquaredUrban.t1*pow(grassland.t1[n], 2)*urban.t1[n] + 
                              aGrasslandSquaredForest.t1*pow(grassland.t1[n], 2)*forest.t1[n] +
                              aGrasslandSquaredCropland.t1*pow(grassland.t1[n], 2)*cropland.t1[n] + 
                              aGrasslandSquaredWetland.t1*pow(grassland.t1[n], 2)*wetland.t1[n] +
                            aCroplandSquaredUrban.t1*pow(cropland.t1[n], 2)*urban.t1[n] + 
                              aCroplandSquaredForest.t1*pow(cropland.t1[n], 2)*forest.t1[n] +
                              aCroplandSquaredGrassland.t1*pow(cropland.t1[n], 2)*grassland.t1[n] + 
                              aCroplandSquaredWetland.t1*pow(cropland.t1[n], 2)*wetland.t1[n] +
                            aWetlandSquaredUrban.t1*pow(wetland.t1[n], 2)*urban.t1[n] + 
                              aWetlandSquaredForest.t1*pow(wetland.t1[n], 2)*forest.t1[n] +
                              aWetlandSquaredGrassland.t1*pow(wetland.t1[n], 2)*grassland.t1[n] + 
                              aWetlandSquaredCropland.t1*pow(wetland.t1[n], 2)*cropland.t1[n]) *
# temporal lag function t1
                            (1 - (exp((-c.pos.forest*delta.pos.forest[n]) + (-c.neg.forest*delta.neg.forest[n]) +
                                   (-c.pos.urban*delta.pos.urban[n]) +
                                   (-c.pos.grassland*delta.pos.grassland[n]) + (-c.neg.grassland*delta.neg.grassland[n]) +
                                   (-c.pos.cropland*delta.pos.cropland[n]) + (-c.neg.cropland*delta.neg.cropland[n]) +
                                   (-c.pos.wetland*delta.pos.wetland[n]) + (-c.neg.wetland*delta.neg.wetland[n]) +
                                   (-c.pos.temp*delta.pos.temp[n]) + (-c.neg.temp*delta.neg.temp[n])))) + 
# additional terms
                            Arouteid[routeid[n]] + OLET[n] +
                              aEven.t1*even.t1[n]

################ log-Likelihood calculation for future WAIC-loo analysis
    
    log.like[n] <- logdensity.pois(q0.t2[n], lambda[n])
    
  }

###############
# Random Effect

for(r in 1:R){
Arouteid[r] ~ dnorm(0, routeid.tau)
}

#####################
for (j in 1:N){
  OLET[j] ~ dnorm(0, tau)
} 

###############
# Priors

####
# temporal delay params priors

  c.pos.urban ~ dunif(0, 1)
  c.pos.grassland ~ dunif(0, 1)
    c.neg.grassland ~ dunif(0, 1)
  c.pos.cropland ~ dunif(0, 1)
    c.neg.cropland ~ dunif(0, 1)
  c.pos.forest ~ dunif(0, 1)
    c.neg.forest ~ dunif(0, 1)
  c.pos.wetland ~ dunif(0, 1)
    c.neg.wetland ~ dunif(0, 1)
  c.pos.temp ~ dunif(0,1)
    c.neg.temp ~ dunif(0,1)

####
# linear and quadratic params priors
  
  a ~ dnorm(0, 10^-6)
  
  aUrban.t2 ~ dnorm(0, 10^-6)
    aUrbanSquared.t2 ~ dnorm(0, 10^-6)
    aUrban.t1 <- aUrban.t2
    aUrbanSquared.t1 <- aUrbanSquared.t2
  aForest.t2 ~ dnorm(0, 10^-6)
    aForestSquared.t2 ~ dnorm(0, 10^-6)
    aForest.t1 <- aForest.t2
    aForestSquared.t1 <- aForestSquared.t2
  aGrassland.t2 ~ dnorm(0, 10^-6)
    aGrasslandSquared.t2 ~ dnorm(0, 10^-6)
    aGrassland.t1 <- aGrassland.t2
    aGrasslandSquared.t1 <- aGrasslandSquared.t2
  aCropland.t2 ~ dnorm(0, 10^-6)
    aCroplandSquared.t2 ~ dnorm(0, 10^-6)
    aCropland.t1 <- aCropland.t2
    aCroplandSquared.t1 <- aCroplandSquared.t2
  aWetland.t2 ~ dnorm(0, 10^-6)
    aWetlandSquared.t2 ~ dnorm(0, 10^-6)
    aWetland.t1 <- aWetland.t2
    aWetlandSquared.t1 <- aWetlandSquared.t2
  aTemperature.t2 ~ dnorm(0, 10^-6)
    aTemperatureSquared.t2 ~ dnorm(0, 10^-6)
    aTemperature.t1 <- aTemperature.t2
    aTemperatureSquared.t1 <- aTemperatureSquared.t2

####
# linear*linear interaction params priors

  aUrbanForest.t2 ~ dnorm(0, 10^-6)
    aUrbanForest.t1 <- aUrbanForest.t2
  aUrbanGrassland.t2 ~ dnorm(0, 10^-6)
    aUrbanGrassland.t1 <- aUrbanGrassland.t2
  aUrbanCropland.t2 ~ dnorm(0, 10^-6)
    aUrbanCropland.t1 <- aUrbanCropland.t2
  aForestGrassland.t2 ~ dnorm(0, 10^-6)
    aForestGrassland.t1 <- aForestGrassland.t2
  aForestCropland.t2 ~ dnorm(0, 10^-6)
    aForestCropland.t1 <- aForestCropland.t2
  aGrasslandCropland.t2 ~ dnorm(0, 10^-6)
    aGrasslandCropland.t1 <- aGrasslandCropland.t2
  aWetlandUrban.t2 ~ dnorm(0, 10^-6)
    aWetlandUrban.t1 <- aWetlandUrban.t2
  aWetlandForest.t2 ~ dnorm(0, 10^-6)
    aWetlandForest.t1 <- aWetlandForest.t2
  aWetlandGrassland.t2 ~ dnorm(0, 10^-6)
    aWetlandGrassland.t1 <- aWetlandGrassland.t2
  aWetlandCropland.t2 ~ dnorm(0, 10^-6)
    aWetlandCropland.t1 <- aWetlandCropland.t2

####
# quadratic*linear interaction params priors

  aUrbanSquaredForest.t2 ~ dnorm(0, 10^-6)              
  aUrbanSquaredForest.t1 <- aUrbanSquaredForest.t2
  aUrbanSquaredGrassland.t2 ~ dnorm(0, 10^-6)       
  aUrbanSquaredGrassland.t1 <- aUrbanSquaredGrassland.t2
  aUrbanSquaredCropland.t2 ~ dnorm(0, 10^-6)
  aUrbanSquaredCropland.t1 <- aUrbanSquaredCropland.t2
  aUrbanSquaredWetland.t2 ~ dnorm(0, 10^-6)
  aUrbanSquaredWetland.t1 <- aUrbanSquaredWetland.t2
  aForestSquaredUrban.t2 ~ dnorm(0, 10^-6) 
  aForestSquaredUrban.t1 <- aForestSquaredUrban.t2
  aForestSquaredCropland.t2 ~ dnorm(0, 10^-6)
  aForestSquaredCropland.t1 <- aForestSquaredCropland.t2
  aForestSquaredGrassland.t2 ~ dnorm(0, 10^-6)
  aForestSquaredGrassland.t1 <- aForestSquaredGrassland.t2
  aForestSquaredWetland.t2 ~ dnorm(0, 10^-6)
  aForestSquaredWetland.t1 <- aForestSquaredWetland.t2
  aGrasslandSquaredUrban.t2 ~ dnorm(0, 10^-6)
  aGrasslandSquaredUrban.t1 <- aGrasslandSquaredUrban.t2
  aGrasslandSquaredForest.t2 ~ dnorm(0, 10^-6)
  aGrasslandSquaredForest.t1 <- aGrasslandSquaredForest.t2
  aGrasslandSquaredCropland.t2 ~ dnorm(0, 10^-6)
  aGrasslandSquaredCropland.t1 <- aGrasslandSquaredCropland.t2
  aGrasslandSquaredWetland.t2 ~ dnorm(0, 10^-6)
  aGrasslandSquaredWetland.t1 <- aGrasslandSquaredWetland.t2
  aCroplandSquaredUrban.t2 ~ dnorm(0, 10^-6) 
  aCroplandSquaredUrban.t1 <- aCroplandSquaredUrban.t2
  aCroplandSquaredForest.t2 ~ dnorm(0, 10^-6)
  aCroplandSquaredForest.t1 <- aCroplandSquaredForest.t2
  aCroplandSquaredGrassland.t2 ~ dnorm(0, 10^-6) 
  aCroplandSquaredGrassland.t1 <- aCroplandSquaredGrassland.t2
  aCroplandSquaredWetland.t2 ~ dnorm(0, 10^-6)
  aCroplandSquaredWetland.t1 <- aCroplandSquaredWetland.t2
  aWetlandSquaredUrban.t2 ~ dnorm(0, 10^-6) 
  aWetlandSquaredUrban.t1 <- aWetlandSquaredUrban.t2
  aWetlandSquaredForest.t2 ~ dnorm(0, 10^-6)
  aWetlandSquaredForest.t1 <- aWetlandSquaredForest.t2
  aWetlandSquaredGrassland.t2 ~ dnorm(0, 10^-6) 
  aWetlandSquaredGrassland.t1 <- aWetlandSquaredGrassland.t2
  aWetlandSquaredCropland.t2 ~ dnorm(0, 10^-6)
  aWetlandSquaredCropland.t1 <- aWetlandSquaredCropland.t2
  
####
# additional params priors

  tau ~ dgamma(0.001, 0.001)
  routeid.tau ~ dgamma(0.001, 0.001)
  aEven.t1 ~ dnorm(0, 10^-6) 

}
